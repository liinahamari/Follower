apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'io.objectbox'

androidExtensions {
    experimental = true
}

android {
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dev.liinahamari.follower"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        resConfigs "en", "ru"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "TEST_FTP_SERVER_ADDRESS", testFtpAddress
            buildConfigField "String", "TEST_FTP_SERVER_USER_LOGIN", testFtpLogin
            buildConfigField "String", "TEST_FTP_SERVER_USER_PASSWORD", testFtpPassword
            buildConfigField "String", "TEST_FTP_SERVER_REMOTE_PATH", testFtpRemotePath

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
        release {
            buildConfigField "String", "TEST_FTP_SERVER_ADDRESS", ""
            buildConfigField "String", "TEST_FTP_SERVER_USER_LOGIN", ""
            buildConfigField "String", "TEST_FTP_SERVER_USER_PASSWORD", ""
            buildConfigField "String", "TEST_FTP_SERVER_REMOTE_PATH", ""

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    /* STANDARD */

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation "androidx.biometric:biometric:1.2.0-alpha03"

    /* JETPACK */
    implementation "androidx.activity:activity-ktx:1.2.4"
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.appcompat:appcompat-resources:1.3.1"
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation files('libs/loggy_sdk-debug.aar')
    debugImplementation "androidx.fragment:fragment-testing:1.3.6"

    /* RX-COMMON */
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.6'
    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'
    implementation 'com.jakewharton.rxrelay:rxrelay:1.2.0'

    /*RX-BINDING */
    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-core:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-appcompat:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-drawerlayout:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-leanback:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-recyclerview:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-slidingpanelayout:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-swiperefreshlayout:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-viewpager:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-viewpager2:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-material:4.0.0'

    /* DAGGER */
    implementation 'com.google.dagger:dagger:2.33'
    kapt 'com.google.dagger:dagger-compiler:2.29.1'

    /* MISC */
    implementation 'jp.wasabeef:recyclerview-animators:4.0.2'
    implementation 'org.osmdroid:osmdroid-android:6.1.10'
    implementation 'com.github.MKergall:osmbonuspack:6.6.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.squareup:seismic:1.0.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    implementation "me.saket.cascade:cascade:1.3.0"
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
    implementation "net.gotev:uploadservice-ftp:4.5.2"
    implementation 'com.scottyab:rootbeer-lib:0.0.8'
    implementation 'com.github.AppIntro:AppIntro:6.1.0'
    implementation 'com.github.cachapa:ExpandableLayout:2.9.2'
    implementation "io.objectbox:objectbox-android:2.9.1"

    /* PERSISTENCE */
    implementation "androidx.room:room-runtime:2.4.0-alpha04"
    kapt "androidx.room:room-compiler:2.4.0-alpha04"
    implementation "androidx.room:room-rxjava3:2.4.0-alpha04"
    testImplementation "androidx.room:room-testing:2.4.0-alpha04"
    implementation 'net.zetetic:android-database-sqlcipher:4.4.3@aar'
    implementation "androidx.sqlite:sqlite-ktx:2.1.0"

    /* NAVIGATION */
    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    implementation "androidx.navigation:navigation-compose:2.4.0-alpha05"

    /* WORK_MANAGER*/
    implementation "androidx.work:work-runtime-ktx:2.5.0"
    implementation "androidx.work:work-rxjava3:2.7.0-alpha02"
    implementation "androidx.work:work-gcm:2.5.0"
    implementation "androidx.work:work-multiprocess:2.5.0"

    /* TESTING */
    androidTestImplementation 'io.github.kakaocup:kakao:3.0.2'
    androidTestImplementation "com.linkedin.dexmaker:dexmaker:2.28.1"
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    kaptAndroidTest 'androidx.databinding:databinding-compiler:7.0.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'androidx.work:work-testing:2.6.0'
    debugImplementation "androidx.fragment:fragment-testing:1.3.6"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "io.mockk:mockk:1.10.2"
    androidTestImplementation 'androidx.test.ext:truth:1.4.0'

    /* PAGING */
    implementation "androidx.paging:paging-runtime-ktx:3.0.1"
    implementation "androidx.paging:paging-rxjava3:3.0.1"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.5.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactive:1.5.1")

    /* RETROFIT & NETWORK */
    def retrofit = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'
    implementation "com.facebook.stetho:stetho-okhttp3:1.5.1"

    /* CRASH REPORTING */
    def acraVersion = '5.7.0'
    implementation "ch.acra:acra-toast:$acraVersion"
    implementation "ch.acra:acra-http:$acraVersion"
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-advanced-scheduler:$acraVersion"
}

kapt {
    correctErrorTypes true
}

static def getTestFtpAddress() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_ADDRESS']
}

static def getTestFtpLogin() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_USER_LOGIN']
}

static def getTestFtpPassword() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_USER_PASSWORD']
}

static def getTestFtpRemotePath() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_REMOTE_PATH']
}