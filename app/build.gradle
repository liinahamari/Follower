apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

androidExtensions {
    experimental = true
}

android {
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dev.liinahamari.follower"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        resConfigs "en", "ru"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "TEST_FTP_SERVER_ADDRESS" , testFtpAddress
            buildConfigField "String", "TEST_FTP_SERVER_USER_LOGIN" , testFtpLogin
            buildConfigField "String", "TEST_FTP_SERVER_USER_PASSWORD" , testFtpPassword
            buildConfigField "String", "TEST_FTP_SERVER_REMOTE_PATH" , testFtpRemotePath

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
        release {
            buildConfigField "String", "TEST_FTP_SERVER_ADDRESS" , ""
            buildConfigField "String", "TEST_FTP_SERVER_USER_LOGIN" , ""
            buildConfigField "String", "TEST_FTP_SERVER_USER_PASSWORD" , ""
            buildConfigField "String", "TEST_FTP_SERVER_REMOTE_PATH" , ""

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    /* STANDARD */
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation "androidx.biometric:biometric:1.2.0-alpha03"

    /* JETPACK */
    implementation "androidx.activity:activity-ktx:1.2.2"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.appcompat:appcompat-resources:1.2.0"
    implementation "androidx.fragment:fragment-ktx:1.3.2"
    debugImplementation "androidx.fragment:fragment-testing:1.3.2"

    /* RX-COMMON */
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.6'
    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'
    implementation 'com.jakewharton.rxrelay:rxrelay:1.2.0'

    /*RX-BINDING */
    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-core:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-appcompat:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-drawerlayout:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-leanback:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-recyclerview:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-slidingpanelayout:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-swiperefreshlayout:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-viewpager:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-viewpager2:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-material:4.0.0'

    /* DAGGER */
    implementation 'com.google.dagger:dagger:2.33'
    kapt 'com.google.dagger:dagger-compiler:2.29.1'

    /* MISC */
    implementation 'org.osmdroid:osmdroid-android:6.1.10'
    implementation 'com.github.MKergall:osmbonuspack:6.6.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.squareup:seismic:1.0.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
    implementation 'net.cachapa.expandablelayout:expandablelayout:2.9.2'
    implementation "me.saket.cascade:cascade:1.3.0"
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
    implementation "net.gotev:uploadservice-ftp:4.5.2"
    implementation 'com.scottyab:rootbeer-lib:0.0.8'
    implementation 'com.github.AppIntro:AppIntro:6.1.0'

    /* PERSISTENCE */
    implementation "androidx.room:room-runtime:2.3.0-rc01"
    kapt "androidx.room:room-compiler:2.3.0-rc01"
    implementation "androidx.room:room-rxjava3:2.3.0-rc01"
    testImplementation "androidx.room:room-testing:2.3.0-rc01"
    implementation 'net.zetetic:android-database-sqlcipher:4.4.3@aar'
    implementation "androidx.sqlite:sqlite-ktx:2.1.0"

    /* NAVIGATION */
    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    implementation "androidx.navigation:navigation-compose:1.0.0-alpha10"

    /* WORK_MANAGER*/
    def work_version = "2.5.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-rxjava3:2.7.0-alpha02"
    implementation "androidx.work:work-gcm:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    implementation "androidx.work:work-multiprocess:$work_version"

    /* TESTING */
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'

    androidTestImplementation 'com.google.truth:truth:1.0.1'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.3.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.3.0'

    testImplementation 'org.mockito:mockito-core:3.6.28'
    androidTestImplementation 'org.mockito:mockito-android:3.5.2'
    testImplementation 'org.mockito:mockito-inline:3.5.2'

    testImplementation 'org.robolectric:robolectric:4.4'

    /* RETROFIT & NETWORK */
    def retrofit = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'
    implementation "com.facebook.stetho:stetho-okhttp3:1.5.1"

    /* CRASH REPORTING */
    def acraVersion = '5.7.0'
    implementation "ch.acra:acra-toast:$acraVersion"
    implementation "ch.acra:acra-http:$acraVersion"
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-advanced-scheduler:$acraVersion"
}

kapt {
    correctErrorTypes true
}

static def getTestFtpAddress(){
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_ADDRESS']
}
static def getTestFtpLogin(){
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_USER_LOGIN']
}
static def getTestFtpPassword(){
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_USER_PASSWORD']
}
static def getTestFtpRemotePath(){
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['TEST_FTP_SERVER_REMOTE_PATH']
}